// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Framework = require("../Framework.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Council_Entity_Document = require("./Council_Entity_Document.bs.js");

var Transition = Framework.Transition.Make(Council_Entity_Document);

function transition(t, $$event) {
  var match = t.state;
  var seq = t.seq;
  var id = t.id;
  var _RE = t._RE;
  if ($$event.TAG === /* Created */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              _RE: _RE,
              id: id,
              seq: seq + 1 | 0,
              state: {
                TAG: /* Free */0,
                _0: $$event.data
              }
            }
          };
  }
  if (match === undefined) {
    return {
            TAG: /* Error */1,
            _0: {
              TAG: /* Uninitialized */0,
              _0: id
            }
          };
  }
  if (match.TAG !== /* Free */0) {
    return {
            TAG: /* Error */1,
            _0: {
              TAG: /* Locked */1,
              _0: id
            }
          };
  }
  var data = match._0;
  switch ($$event.TAG | 0) {
    case /* SectionAdded */1 :
        return {
                TAG: /* Ok */0,
                _0: {
                  _RE: _RE,
                  id: id,
                  seq: seq + 1 | 0,
                  state: {
                    TAG: /* Free */0,
                    _0: {
                      title: data.title,
                      sections: Belt_Array.concat(data.sections, [$$event.section]),
                      tags: data.tags,
                      owner: data.owner,
                      responsibility: data.responsibility
                    }
                  }
                }
              };
    case /* SectionDeleted */2 :
        var deleted = $$event.section;
        return {
                TAG: /* Ok */0,
                _0: {
                  _RE: _RE,
                  id: id,
                  seq: seq + 1 | 0,
                  state: {
                    TAG: /* Free */0,
                    _0: {
                      title: data.title,
                      sections: Belt_Array.keep(data.sections, (function (id) {
                              return id !== deleted;
                            })),
                      tags: data.tags,
                      owner: data.owner,
                      responsibility: data.responsibility
                    }
                  }
                }
              };
    case /* ResponsibilityAssigned */3 :
        return {
                TAG: /* Ok */0,
                _0: {
                  _RE: _RE,
                  id: id,
                  seq: seq + 1 | 0,
                  state: {
                    TAG: /* Free */0,
                    _0: {
                      title: data.title,
                      sections: data.sections,
                      tags: data.tags,
                      owner: data.owner,
                      responsibility: $$event.responsibility
                    }
                  }
                }
              };
    case /* TagsModified */4 :
        return {
                TAG: /* Ok */0,
                _0: {
                  _RE: _RE,
                  id: id,
                  seq: seq + 1 | 0,
                  state: {
                    TAG: /* Free */0,
                    _0: {
                      title: data.title,
                      sections: data.sections,
                      tags: $$event.tags,
                      owner: data.owner,
                      responsibility: data.responsibility
                    }
                  }
                }
              };
    case /* Locked */5 :
        return {
                TAG: /* Ok */0,
                _0: {
                  _RE: _RE,
                  id: id,
                  seq: seq + 1 | 0,
                  state: {
                    TAG: /* Locked */1,
                    by: $$event.by,
                    data: data
                  }
                }
              };
    
  }
}

function create(t, date, data) {
  var $$event = {
    TAG: /* Created */0,
    date: date,
    data: data
  };
  return Curry._3(Transition.run, transition, t, $$event);
}

function addSection(t, date, section) {
  var $$event = {
    TAG: /* SectionAdded */1,
    date: date,
    section: section
  };
  return Curry._3(Transition.run, transition, t, $$event);
}

function deleteSection(t, date, section) {
  var $$event = {
    TAG: /* SectionDeleted */2,
    date: date,
    section: section
  };
  return Curry._3(Transition.run, transition, t, $$event);
}

function assignResponsibility(t, date, responsibility) {
  var $$event = {
    TAG: /* ResponsibilityAssigned */3,
    date: date,
    responsibility: responsibility
  };
  return Curry._3(Transition.run, transition, t, $$event);
}

function modifyTags(t, date, tags) {
  var $$event = {
    TAG: /* TagsModified */4,
    date: date,
    tags: tags
  };
  return Curry._3(Transition.run, transition, t, $$event);
}

function lock(t, date, by) {
  var $$event = {
    TAG: /* Locked */5,
    date: date,
    by: by
  };
  return Curry._3(Transition.run, transition, t, $$event);
}

var $$Document;

exports.$$Document = $$Document;
exports.Transition = Transition;
exports.transition = transition;
exports.create = create;
exports.addSection = addSection;
exports.deleteSection = deleteSection;
exports.assignResponsibility = assignResponsibility;
exports.modifyTags = modifyTags;
exports.lock = lock;
/* Transition Not a pure module */
